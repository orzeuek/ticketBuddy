import random, json, os, pprint, redis


class StateRepository:
    def __init__(self, storage):
        self.storage = storage

    def get_state(self, text, session_id):
        if text is None:
            raise Exception("text argument is required!")

        state = self._get_empty_state() if session_id is None else self._get_state_for_session(session_id)

        state.update({"text": text})

        return state

    def save_state(self, state, session_id):
        self.storage.set(session_id, json.dumps(state))

    def _get_unique_session_id(self):
        id = random.randint(1, 999999999999)
        while self.storage.has(id):
            id = random.randint(1, 999999999999)

        return id

    def _get_empty_state(self, session_id=None):
        return {
            # do we have origin defined ?
            "has_origin": False,
            # origin station
            "origin": None,
            # do we have destination defined ?
            "has_destination": False,
            # destination station
            "destination": None,
            # do we have travel date defined ?
            "has_travel_date": False,
            # travel date
            "travel_date": None,
            # do we have travel time defined ?
            "has_travel_time": False,
            # travel time
            "travel_time": None,
            # current user input
            "text": None,
            # response to user input generated by bot (optional)
            "prompt": None,
            # use it to keep context for conversations
            "session_id": self._get_unique_session_id() if session_id is None else session_id,
            # placeholder for current conversation step
            "step": None
        }

    def _get_state_for_session(self, session_id):
        if self.storage.has(session_id) is False:
            self.storage.set(session_id, json.dumps(self._get_empty_state(session_id)))

        return json.loads(self.storage.get(session_id).decode("utf-8"))


class StateStorage:
    def __init__(self, host, port):
        self.conn = redis.StrictRedis(host=host, port=port, db=0)

    def has(self, session_id):
        return self.conn.get(session_id) is not None

    def get(self, session_id):
        return self.conn.get(session_id)

    def set(self, session_id, data):
        self.conn.set(session_id, data)
