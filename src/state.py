import random, json, os, pprint

STATE_STORAGE = None


def get_state(text, session_id):
    if text is None:
        raise Exception("text argument is required!")

    if session_id is None:
        state = get_empty_state()
    else:
        state = get_state_for_session(session_id)

    state.update({"text": text})

    return state

def get_empty_state(session_id=None):
    return {
        # do we have origin defined ?
        "has_origin": False,
        # origin station
        "origin": None,
        # do we have destination defined ?
        "has_destination": False,
        # destination station
        "destination": None,
        # do we have travel date defined ?
        "has_travel_date": False,
        # travel date
        "travel_date": None,
        # do we have travel time defined ?
        "has_travel_time": False,
        # travel time
        "travel_time": None,
        # current user input
        "text": None,
        # response to user input generated by bot (optional)
        "prompt": None,
        # use it to keep context for conversations
        "session_id": get_unique_session_id() if session_id is None else session_id,
    }


def get_state_for_session(session_id):
    if STATE_STORAGE.get(session_id) is None:
        STATE_STORAGE.set(session_id, json.dumps(get_empty_state(session_id)))

    return json.loads(STATE_STORAGE.get(session_id).decode("utf-8"))


def save_state(state, session_id):
    STATE_STORAGE.set(session_id, json.dumps(state))


def get_unique_session_id():
    id = random.randint(1, 999999999999)
    while STATE_STORAGE._has_key(id):
        id = random.randint(1, 999999999999)

    return id
